function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { NativeModules } from 'react-native';
import { Constants } from './constants';
import { Identify } from './identify';
const AmplitudeReactNative = NativeModules.AmplitudeReactNative;
export { Identify };
export class Amplitude {
  constructor(instanceName) {
    _defineProperty(this, "instanceName", void 0);

    this.instanceName = instanceName;

    this._setLibraryName(Constants.packageSourceName);

    this._setLibraryVersion(Constants.packageVersion);
  }

  static getInstance(instanceName = this._defaultInstanceName) {
    if (!this._instances) {
      this._instances = {};
    }

    if (!Object.prototype.hasOwnProperty.call(this._instances, instanceName)) {
      this._instances[instanceName] = new Amplitude(instanceName);
    }

    return this._instances[instanceName];
  }

  init(apiKey) {
    return AmplitudeReactNative.initialize(this.instanceName, apiKey);
  }
  /**
   * Tracks an event. Events are saved locally.
   * Uploads are batched to occur every 30 events or every 30 seconds
   * (whichever comes first), as well as on app close.
   *
   * @param eventType The name of the event you wish to track.
   */


  logEvent(eventType, eventProperties) {
    if (eventProperties && Object.keys(eventProperties).length > 0) {
      return AmplitudeReactNative.logEventWithProperties(this.instanceName, eventType, eventProperties);
    }

    return AmplitudeReactNative.logEvent(this.instanceName, eventType);
  }
  /**
   * Enable COPPA (Children's Online Privacy Protection Act) restrictions on
   * IDFA, IDFV, city, IP address and location tracking.
   *
   * This can be used by any customer that does not want to collect IDFA, IDFV,
   * city, IP address and location tracking.
   */


  enableCoppaControl() {
    return AmplitudeReactNative.enableCoppaControl(this.instanceName);
  }
  /**
   * Disable COPPA (Children's Online Privacy Protection Act) restrictions on
   * IDFA, IDFV, city, IP address and location tracking.
   */


  disableCoppaControl() {
    return AmplitudeReactNative.disableCoppaControl(this.instanceName);
  }
  /**
   * Regenerate the DeviceId
   */


  regenerateDeviceId() {
    return AmplitudeReactNative.regenerateDeviceId(this.instanceName);
  }
  /**
   * Sets a custom device id. <b>Note: only do this if you know what you are doing!</b>
   *
   * @param deviceId The device id.
   */


  setDeviceId(deviceId) {
    return AmplitudeReactNative.setDeviceId(this.instanceName, deviceId);
  }
  /**
   * Fetches the deviceId, a unique identifier shared between multiple users using the same app on the same device.
   * @returns the deviceId.
   */


  getDeviceId() {
    return AmplitudeReactNative.getDeviceId(this.instanceName);
  }
  /**
   * Use the Advertising ID on Android if available from Google Play Services.
   * Must be called before init.
   */


  setAdvertisingIdForDeviceId() {
    return AmplitudeReactNative.setAdvertisingIdForDeviceId(this.instanceName);
  }
  /**
   * Use the App Set ID (fall back to this if `useAdvertisingIdForDeviceId` is used) for device ID.
   * Must be called before init.
   */


  setAppSetIdForDeviceId() {
    return AmplitudeReactNative.setAppSetIdForDeviceId(this.instanceName);
  }
  /**
   * Enables tracking opt out.
   *
   * If the user wants to opt out of all tracking, use this method to enable
   * opt out for them. Once opt out is enabled, no events will be saved locally
   * or sent to the server.
   *
   * Calling this method again with enabled set to false will turn tracking back on for the user.
   *
   * @param optOut
   */


  setOptOut(optOut) {
    return AmplitudeReactNative.setOptOut(this.instanceName, optOut);
  }
  /**
   * Whether to automatically log start and end session events corresponding to
   * the start and end of a user's session.
   *
   * @param trackSessionEvents
   */


  trackingSessionEvents(trackSessionEvents) {
    return AmplitudeReactNative.trackingSessionEvents(this.instanceName, trackSessionEvents);
  }
  /**
   * If your app has its own login system that you want to track users with,
   * you can set the userId.
   *
   * @param userId
   */


  setUserId(userId) {
    return AmplitudeReactNative.setUserId(this.instanceName, userId);
  }
  /**
   * Customize the destination for server url.
   *
   * @param serverUrl
   */


  setServerUrl(serverUrl) {
    return AmplitudeReactNative.setServerUrl(this.instanceName, serverUrl);
  }
  /**
   * Dynamically adjust server URL
   *
   * @param useDynamicConfig
   */


  setUseDynamicConfig(useDynamicConfig) {
    return AmplitudeReactNative.setUseDynamicConfig(this.instanceName, useDynamicConfig);
  }
  /**
   * Log revenue data.
   *
   * Note: price is a required field to log revenue events.
   * If quantity is not specified then defaults to 1.
   *
   * @param userProperties
   */


  logRevenue(userProperties) {
    return AmplitudeReactNative.logRevenueV2(this.instanceName, userProperties);
  }
  /**
   * Send an identify call containing user property operations to Amplitude servers.
   *
   * @param identifyInstance
   */


  identify(identifyInstance) {
    return AmplitudeReactNative.identify(this.instanceName, identifyInstance.payload);
  }
  /**
   * Adds a user to a group or groups. You need to specify a groupType and groupName(s).
   * @param groupType
   * @param groupName
   */


  setGroup(groupType, groupName) {
    return AmplitudeReactNative.setGroup(this.instanceName, groupType, groupName);
  }
  /**
   * Set or update properties of particular groups
   *
   * @param groupType
   * @param groupName
   * @param identifyInstance
   */


  groupIdentify(groupType, groupName, identifyInstance) {
    return AmplitudeReactNative.groupIdentify(this.instanceName, groupType, groupName, identifyInstance.payload);
  }
  /**
   * Adds properties that are tracked on the user level.
   * Note: Property keys must be [String] objects and values must be serializable.
   *
   * @param userProperties
   */


  setUserProperties(userProperties) {
    return AmplitudeReactNative.setUserProperties(this.instanceName, userProperties);
  }
  /**
   * Clears all properties that are tracked on the user level.
   *
   * Note: This operation is irreversible!!
   */


  clearUserProperties() {
    return AmplitudeReactNative.clearUserProperties(this.instanceName);
  }
  /**
   * Upload all unsent events.
   */


  uploadEvents() {
    return AmplitudeReactNative.uploadEvents(this.instanceName);
  }
  /**
   * Fetches the sessionId, a timestamp used for log session event.
   * @returns the sessionId.
   */


  getSessionId() {
    return AmplitudeReactNative.getSessionId(this.instanceName);
  }
  /**
   * Sets the minimum cutoff time in millisseconds for sessions to be considered distinct.
   * The default time is 5 minutes.
   *
   * @param minTimeBetweenSessionsMillis
   */


  setMinTimeBetweenSessionsMillis(minTimeBetweenSessionsMillis) {
    return AmplitudeReactNative.setMinTimeBetweenSessionsMillis(this.instanceName, minTimeBetweenSessionsMillis);
  }
  /**
   * Set Amplitude Server Zone, switch to zone related configuration,
   * including dynamic configuration. If updateServerUrl is true, including server url as well.
   * Recommend to keep updateServerUrl to be true for alignment.
   *
   * @param serverZone amplitude serverZone, US or EU, default is US
   * @param updateServerUrl if update server url when update server zone, recommend setting true
   */


  setServerZone(serverZone, updateServerUrl = true) {
    return AmplitudeReactNative.setServerZone(this.instanceName, serverZone, updateServerUrl);
  }
  /**
   * Sets event upload max batch size. This controls the maximum number of events sent with
   * each upload request.
   *
   * @param eventUploadMaxBatchSize the event upload max batch size
   */


  setEventUploadMaxBatchSize(eventUploadMaxBatchSize) {
    return AmplitudeReactNative.setEventUploadMaxBatchSize(this.instanceName, eventUploadMaxBatchSize);
  }
  /**
   * Sets event upload period millis. The SDK will attempt to batch upload unsent events
   * every eventUploadPeriodMillis milliseconds, or if the unsent event count exceeds the
   * event upload threshold.
   *
   * @param eventUploadPeriodMillis the event upload period millis
   */


  setEventUploadPeriodMillis(eventUploadPeriodMillis) {
    return AmplitudeReactNative.setEventUploadPeriodMillis(this.instanceName, eventUploadPeriodMillis);
  }
  /**
   * Sets event upload threshold. The SDK will attempt to batch upload unsent events
   * every eventUploadPeriodMillis milliseconds, or if the unsent event count exceeds the
   * event upload threshold.
   *
   * @param eventUploadThreshold the event upload threshold
   */


  setEventUploadThreshold(eventUploadThreshold) {
    return AmplitudeReactNative.setEventUploadThreshold(this.instanceName, eventUploadThreshold);
  } // Private bridging calls


  _setLibraryName(libraryName) {
    return AmplitudeReactNative.setLibraryName(this.instanceName, libraryName);
  }

  _setLibraryVersion(libraryVersion) {
    return AmplitudeReactNative.setLibraryVersion(this.instanceName, libraryVersion);
  }

}

_defineProperty(Amplitude, "_instances", void 0);

_defineProperty(Amplitude, "_defaultInstanceName", '$default_instance');
//# sourceMappingURL=index.js.map
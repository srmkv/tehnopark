"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Identify = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Identify {
  constructor() {
    _defineProperty(this, "payload", void 0);

    this.payload = {};
  }

  set(key, value) {
    this.addOp(Identify.OP_SET, key, value);
  }

  setOnce(key, value) {
    this.addOp(Identify.OP_SET_ONCE, key, value);
  }

  add(key, value) {
    this.addOp(Identify.OP_ADD, key, value);
  }

  unset(key) {
    this.addOp(Identify.OP_UNSET, key, '-');
  }

  append(key, value) {
    this.addOp(Identify.OP_APPEND, key, value);
  }

  addOp(op, key, value) {
    if (!Identify.ALL_OPS.includes(op)) {
      throw new Error("Unknown Identify operation: ".concat(op, " called with key: ").concat(key, " value: ").concat(String(value)));
    }

    this.opMap(op)[key] = value;
  }

  opMap(key) {
    if (!Object.prototype.hasOwnProperty.call(this.payload, key)) {
      this.payload[key] = {};
    }

    return this.payload[key];
  }

}

exports.Identify = Identify;

_defineProperty(Identify, "OP_SET", '$set');

_defineProperty(Identify, "OP_SET_ONCE", '$setOnce');

_defineProperty(Identify, "OP_ADD", '$add');

_defineProperty(Identify, "OP_APPEND", '$append');

_defineProperty(Identify, "OP_UNSET", '$unset');

_defineProperty(Identify, "ALL_OPS", [Identify.OP_SET, Identify.OP_SET_ONCE, Identify.OP_ADD, Identify.OP_APPEND, Identify.OP_UNSET]);
//# sourceMappingURL=identify.js.map
{"version":3,"sources":["index.ts"],"names":["AmplitudeReactNative","NativeModules","Amplitude","constructor","instanceName","_setLibraryName","Constants","packageSourceName","_setLibraryVersion","packageVersion","getInstance","_defaultInstanceName","_instances","Object","prototype","hasOwnProperty","call","init","apiKey","initialize","logEvent","eventType","eventProperties","keys","length","logEventWithProperties","enableCoppaControl","disableCoppaControl","regenerateDeviceId","setDeviceId","deviceId","getDeviceId","setAdvertisingIdForDeviceId","setAppSetIdForDeviceId","setOptOut","optOut","trackingSessionEvents","trackSessionEvents","setUserId","userId","setServerUrl","serverUrl","setUseDynamicConfig","useDynamicConfig","logRevenue","userProperties","logRevenueV2","identify","identifyInstance","payload","setGroup","groupType","groupName","groupIdentify","setUserProperties","clearUserProperties","uploadEvents","getSessionId","setMinTimeBetweenSessionsMillis","minTimeBetweenSessionsMillis","setServerZone","serverZone","updateServerUrl","setEventUploadMaxBatchSize","eventUploadMaxBatchSize","setEventUploadPeriodMillis","eventUploadPeriodMillis","setEventUploadThreshold","eventUploadThreshold","libraryName","setLibraryName","libraryVersion","setLibraryVersion"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAGA,MAAMA,oBAAgD,GACpDC,2BAAcD,oBADhB;;AAKO,MAAME,SAAN,CAAgB;AAKbC,EAAAA,WAAR,CAAoBC,YAApB,EAA0C;AAAA;;AACxC,SAAKA,YAAL,GAAoBA,YAApB;;AACA,SAAKC,eAAL,CAAqBC,qBAAUC,iBAA/B;;AACA,SAAKC,kBAAL,CAAwBF,qBAAUG,cAAlC;AACD;;AAED,SAAOC,WAAP,CACEN,YAAoB,GAAG,KAAKO,oBAD9B,EAEa;AACX,QAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkB,EAAlB;AACD;;AACD,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKJ,UAA1C,EAAsDR,YAAtD,CAAL,EAA0E;AACxE,WAAKQ,UAAL,CAAgBR,YAAhB,IAAgC,IAAIF,SAAJ,CAAcE,YAAd,CAAhC;AACD;;AAED,WAAO,KAAKQ,UAAL,CAAgBR,YAAhB,CAAP;AACD;;AAEDa,EAAAA,IAAI,CAACC,MAAD,EAAmC;AACrC,WAAOlB,oBAAoB,CAACmB,UAArB,CAAgC,KAAKf,YAArC,EAAmDc,MAAnD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,QAAQ,CACNC,SADM,EAENC,eAFM,EAGY;AAClB,QAAIA,eAAe,IAAIT,MAAM,CAACU,IAAP,CAAYD,eAAZ,EAA6BE,MAA7B,GAAsC,CAA7D,EAAgE;AAC9D,aAAOxB,oBAAoB,CAACyB,sBAArB,CACL,KAAKrB,YADA,EAELiB,SAFK,EAGLC,eAHK,CAAP;AAKD;;AACD,WAAOtB,oBAAoB,CAACoB,QAArB,CAA8B,KAAKhB,YAAnC,EAAiDiB,SAAjD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,kBAAkB,GAAqB;AACrC,WAAO1B,oBAAoB,CAAC0B,kBAArB,CAAwC,KAAKtB,YAA7C,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEuB,EAAAA,mBAAmB,GAAqB;AACtC,WAAO3B,oBAAoB,CAAC2B,mBAArB,CAAyC,KAAKvB,YAA9C,CAAP;AACD;AAED;AACF;AACA;;;AACEwB,EAAAA,kBAAkB,GAAqB;AACrC,WAAO5B,oBAAoB,CAAC4B,kBAArB,CAAwC,KAAKxB,YAA7C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEyB,EAAAA,WAAW,CAACC,QAAD,EAAqC;AAC9C,WAAO9B,oBAAoB,CAAC6B,WAArB,CAAiC,KAAKzB,YAAtC,EAAoD0B,QAApD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,WAAW,GAAoB;AAC7B,WAAO/B,oBAAoB,CAAC+B,WAArB,CAAiC,KAAK3B,YAAtC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE4B,EAAAA,2BAA2B,GAAqB;AAC9C,WAAOhC,oBAAoB,CAACgC,2BAArB,CAAiD,KAAK5B,YAAtD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE6B,EAAAA,sBAAsB,GAAqB;AACzC,WAAOjC,oBAAoB,CAACiC,sBAArB,CAA4C,KAAK7B,YAAjD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE8B,EAAAA,SAAS,CAACC,MAAD,EAAoC;AAC3C,WAAOnC,oBAAoB,CAACkC,SAArB,CAA+B,KAAK9B,YAApC,EAAkD+B,MAAlD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,qBAAqB,CAACC,kBAAD,EAAgD;AACnE,WAAOrC,oBAAoB,CAACoC,qBAArB,CACL,KAAKhC,YADA,EAELiC,kBAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAACC,MAAD,EAA0C;AACjD,WAAOvC,oBAAoB,CAACsC,SAArB,CAA+B,KAAKlC,YAApC,EAAkDmC,MAAlD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,YAAY,CAACC,SAAD,EAAsC;AAChD,WAAOzC,oBAAoB,CAACwC,YAArB,CAAkC,KAAKpC,YAAvC,EAAqDqC,SAArD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,mBAAmB,CAACC,gBAAD,EAA8C;AAC/D,WAAO3C,oBAAoB,CAAC0C,mBAArB,CACL,KAAKtC,YADA,EAELuC,gBAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,UAAU,CAACC,cAAD,EAQW;AACnB,WAAO7C,oBAAoB,CAAC8C,YAArB,CAAkC,KAAK1C,YAAvC,EAAqDyC,cAArD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,QAAQ,CAACC,gBAAD,EAA+C;AACrD,WAAOhD,oBAAoB,CAAC+C,QAArB,CACL,KAAK3C,YADA,EAEL4C,gBAAgB,CAACC,OAFZ,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,CAACC,SAAD,EAAoBC,SAApB,EAAoE;AAC1E,WAAOpD,oBAAoB,CAACkD,QAArB,CACL,KAAK9C,YADA,EAEL+C,SAFK,EAGLC,SAHK,CAAP;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,aAAa,CACXF,SADW,EAEXC,SAFW,EAGXJ,gBAHW,EAIO;AAClB,WAAOhD,oBAAoB,CAACqD,aAArB,CACL,KAAKjD,YADA,EAEL+C,SAFK,EAGLC,SAHK,EAILJ,gBAAgB,CAACC,OAJZ,CAAP;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,iBAAiB,CAACT,cAAD,EAA4D;AAC3E,WAAO7C,oBAAoB,CAACsD,iBAArB,CACL,KAAKlD,YADA,EAELyC,cAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;;;AACEU,EAAAA,mBAAmB,GAAqB;AACtC,WAAOvD,oBAAoB,CAACuD,mBAArB,CAAyC,KAAKnD,YAA9C,CAAP;AACD;AAED;AACF;AACA;;;AACEoD,EAAAA,YAAY,GAAqB;AAC/B,WAAOxD,oBAAoB,CAACwD,YAArB,CAAkC,KAAKpD,YAAvC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEqD,EAAAA,YAAY,GAAoB;AAC9B,WAAOzD,oBAAoB,CAACyD,YAArB,CAAkC,KAAKrD,YAAvC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEsD,EAAAA,+BAA+B,CAC7BC,4BAD6B,EAEX;AAClB,WAAO3D,oBAAoB,CAAC0D,+BAArB,CACL,KAAKtD,YADA,EAELuD,4BAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,aAAa,CACXC,UADW,EAEXC,eAAwB,GAAG,IAFhB,EAGO;AAClB,WAAO9D,oBAAoB,CAAC4D,aAArB,CACL,KAAKxD,YADA,EAELyD,UAFK,EAGLC,eAHK,CAAP;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,0BAA0B,CACxBC,uBADwB,EAEN;AAClB,WAAOhE,oBAAoB,CAAC+D,0BAArB,CACL,KAAK3D,YADA,EAEL4D,uBAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,0BAA0B,CACxBC,uBADwB,EAEN;AAClB,WAAOlE,oBAAoB,CAACiE,0BAArB,CACL,KAAK7D,YADA,EAEL8D,uBAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,uBAAuB,CAACC,oBAAD,EAAiD;AACtE,WAAOpE,oBAAoB,CAACmE,uBAArB,CACL,KAAK/D,YADA,EAELgE,oBAFK,CAAP;AAID,GA1VoB,CA4VrB;;;AACQ/D,EAAAA,eAAR,CAAwBgE,WAAxB,EAA+D;AAC7D,WAAOrE,oBAAoB,CAACsE,cAArB,CAAoC,KAAKlE,YAAzC,EAAuDiE,WAAvD,CAAP;AACD;;AAEO7D,EAAAA,kBAAR,CAA2B+D,cAA3B,EAAqE;AACnE,WAAOvE,oBAAoB,CAACwE,iBAArB,CACL,KAAKpE,YADA,EAELmE,cAFK,CAAP;AAID;;AAtWoB;;;;gBAAVrE,S;;gBAAAA,S,0BAE2B,mB","sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { Constants } from './constants';\nimport { Identify } from './identify';\nimport { AmplitudeReactNativeModule } from './types';\n\nconst AmplitudeReactNative: AmplitudeReactNativeModule =\n  NativeModules.AmplitudeReactNative;\n\nexport { Identify };\n\nexport class Amplitude {\n  private static _instances: Record<string, Amplitude>;\n  private static _defaultInstanceName = '$default_instance';\n  instanceName: string;\n\n  private constructor(instanceName: string) {\n    this.instanceName = instanceName;\n    this._setLibraryName(Constants.packageSourceName);\n    this._setLibraryVersion(Constants.packageVersion);\n  }\n\n  static getInstance(\n    instanceName: string = this._defaultInstanceName,\n  ): Amplitude {\n    if (!this._instances) {\n      this._instances = {};\n    }\n    if (!Object.prototype.hasOwnProperty.call(this._instances, instanceName)) {\n      this._instances[instanceName] = new Amplitude(instanceName);\n    }\n\n    return this._instances[instanceName];\n  }\n\n  init(apiKey: string): Promise<boolean> {\n    return AmplitudeReactNative.initialize(this.instanceName, apiKey);\n  }\n\n  /**\n   * Tracks an event. Events are saved locally.\n   * Uploads are batched to occur every 30 events or every 30 seconds\n   * (whichever comes first), as well as on app close.\n   *\n   * @param eventType The name of the event you wish to track.\n   */\n  logEvent(\n    eventType: string,\n    eventProperties?: Record<string, unknown>,\n  ): Promise<boolean> {\n    if (eventProperties && Object.keys(eventProperties).length > 0) {\n      return AmplitudeReactNative.logEventWithProperties(\n        this.instanceName,\n        eventType,\n        eventProperties,\n      );\n    }\n    return AmplitudeReactNative.logEvent(this.instanceName, eventType);\n  }\n\n  /**\n   * Enable COPPA (Children's Online Privacy Protection Act) restrictions on\n   * IDFA, IDFV, city, IP address and location tracking.\n   *\n   * This can be used by any customer that does not want to collect IDFA, IDFV,\n   * city, IP address and location tracking.\n   */\n  enableCoppaControl(): Promise<boolean> {\n    return AmplitudeReactNative.enableCoppaControl(this.instanceName);\n  }\n\n  /**\n   * Disable COPPA (Children's Online Privacy Protection Act) restrictions on\n   * IDFA, IDFV, city, IP address and location tracking.\n   */\n  disableCoppaControl(): Promise<boolean> {\n    return AmplitudeReactNative.disableCoppaControl(this.instanceName);\n  }\n\n  /**\n   * Regenerate the DeviceId\n   */\n  regenerateDeviceId(): Promise<boolean> {\n    return AmplitudeReactNative.regenerateDeviceId(this.instanceName);\n  }\n\n  /**\n   * Sets a custom device id. <b>Note: only do this if you know what you are doing!</b>\n   *\n   * @param deviceId The device id.\n   */\n  setDeviceId(deviceId: string): Promise<boolean> {\n    return AmplitudeReactNative.setDeviceId(this.instanceName, deviceId);\n  }\n\n  /**\n   * Fetches the deviceId, a unique identifier shared between multiple users using the same app on the same device.\n   * @returns the deviceId.\n   */\n  getDeviceId(): Promise<string> {\n    return AmplitudeReactNative.getDeviceId(this.instanceName);\n  }\n\n  /**\n   * Use the Advertising ID on Android if available from Google Play Services.\n   * Must be called before init.\n   */\n  setAdvertisingIdForDeviceId(): Promise<boolean> {\n    return AmplitudeReactNative.setAdvertisingIdForDeviceId(this.instanceName);\n  }\n\n  /**\n   * Use the App Set ID (fall back to this if `useAdvertisingIdForDeviceId` is used) for device ID.\n   * Must be called before init.\n   */\n  setAppSetIdForDeviceId(): Promise<boolean> {\n    return AmplitudeReactNative.setAppSetIdForDeviceId(this.instanceName);\n  }\n\n  /**\n   * Enables tracking opt out.\n   *\n   * If the user wants to opt out of all tracking, use this method to enable\n   * opt out for them. Once opt out is enabled, no events will be saved locally\n   * or sent to the server.\n   *\n   * Calling this method again with enabled set to false will turn tracking back on for the user.\n   *\n   * @param optOut\n   */\n  setOptOut(optOut: boolean): Promise<boolean> {\n    return AmplitudeReactNative.setOptOut(this.instanceName, optOut);\n  }\n\n  /**\n   * Whether to automatically log start and end session events corresponding to\n   * the start and end of a user's session.\n   *\n   * @param trackSessionEvents\n   */\n  trackingSessionEvents(trackSessionEvents: boolean): Promise<boolean> {\n    return AmplitudeReactNative.trackingSessionEvents(\n      this.instanceName,\n      trackSessionEvents,\n    );\n  }\n\n  /**\n   * If your app has its own login system that you want to track users with,\n   * you can set the userId.\n   *\n   * @param userId\n   */\n  setUserId(userId: string | null): Promise<boolean> {\n    return AmplitudeReactNative.setUserId(this.instanceName, userId);\n  }\n\n  /**\n   * Customize the destination for server url.\n   *\n   * @param serverUrl\n   */\n  setServerUrl(serverUrl: string): Promise<boolean> {\n    return AmplitudeReactNative.setServerUrl(this.instanceName, serverUrl);\n  }\n\n  /**\n   * Dynamically adjust server URL\n   *\n   * @param useDynamicConfig\n   */\n  setUseDynamicConfig(useDynamicConfig: boolean): Promise<boolean> {\n    return AmplitudeReactNative.setUseDynamicConfig(\n      this.instanceName,\n      useDynamicConfig,\n    );\n  }\n\n  /**\n   * Log revenue data.\n   *\n   * Note: price is a required field to log revenue events.\n   * If quantity is not specified then defaults to 1.\n   *\n   * @param userProperties\n   */\n  logRevenue(userProperties: {\n    price: number;\n    productId?: string;\n    quantity?: number;\n    revenueType?: string;\n    receipt?: string;\n    receiptSignature?: string;\n    eventProperties?: { [key: string]: any };\n  }): Promise<boolean> {\n    return AmplitudeReactNative.logRevenueV2(this.instanceName, userProperties);\n  }\n\n  /**\n   * Send an identify call containing user property operations to Amplitude servers.\n   *\n   * @param identifyInstance\n   */\n  identify(identifyInstance: Identify): Promise<boolean> {\n    return AmplitudeReactNative.identify(\n      this.instanceName,\n      identifyInstance.payload,\n    );\n  }\n\n  /**\n   * Adds a user to a group or groups. You need to specify a groupType and groupName(s).\n   * @param groupType\n   * @param groupName\n   */\n  setGroup(groupType: string, groupName: string | string[]): Promise<boolean> {\n    return AmplitudeReactNative.setGroup(\n      this.instanceName,\n      groupType,\n      groupName,\n    );\n  }\n\n  /**\n   * Set or update properties of particular groups\n   *\n   * @param groupType\n   * @param groupName\n   * @param identifyInstance\n   */\n  groupIdentify(\n    groupType: string,\n    groupName: string | string[],\n    identifyInstance: Identify,\n  ): Promise<boolean> {\n    return AmplitudeReactNative.groupIdentify(\n      this.instanceName,\n      groupType,\n      groupName,\n      identifyInstance.payload,\n    );\n  }\n\n  /**\n   * Adds properties that are tracked on the user level.\n   * Note: Property keys must be [String] objects and values must be serializable.\n   *\n   * @param userProperties\n   */\n  setUserProperties(userProperties: Record<string, unknown>): Promise<boolean> {\n    return AmplitudeReactNative.setUserProperties(\n      this.instanceName,\n      userProperties,\n    );\n  }\n\n  /**\n   * Clears all properties that are tracked on the user level.\n   *\n   * Note: This operation is irreversible!!\n   */\n  clearUserProperties(): Promise<boolean> {\n    return AmplitudeReactNative.clearUserProperties(this.instanceName);\n  }\n\n  /**\n   * Upload all unsent events.\n   */\n  uploadEvents(): Promise<boolean> {\n    return AmplitudeReactNative.uploadEvents(this.instanceName);\n  }\n\n  /**\n   * Fetches the sessionId, a timestamp used for log session event.\n   * @returns the sessionId.\n   */\n  getSessionId(): Promise<number> {\n    return AmplitudeReactNative.getSessionId(this.instanceName);\n  }\n\n  /**\n   * Sets the minimum cutoff time in millisseconds for sessions to be considered distinct.\n   * The default time is 5 minutes.\n   *\n   * @param minTimeBetweenSessionsMillis\n   */\n  setMinTimeBetweenSessionsMillis(\n    minTimeBetweenSessionsMillis: number,\n  ): Promise<boolean> {\n    return AmplitudeReactNative.setMinTimeBetweenSessionsMillis(\n      this.instanceName,\n      minTimeBetweenSessionsMillis,\n    );\n  }\n\n  /**\n   * Set Amplitude Server Zone, switch to zone related configuration,\n   * including dynamic configuration. If updateServerUrl is true, including server url as well.\n   * Recommend to keep updateServerUrl to be true for alignment.\n   *\n   * @param serverZone amplitude serverZone, US or EU, default is US\n   * @param updateServerUrl if update server url when update server zone, recommend setting true\n   */\n  setServerZone(\n    serverZone: string,\n    updateServerUrl: boolean = true,\n  ): Promise<boolean> {\n    return AmplitudeReactNative.setServerZone(\n      this.instanceName,\n      serverZone,\n      updateServerUrl,\n    );\n  }\n\n  /**\n   * Sets event upload max batch size. This controls the maximum number of events sent with\n   * each upload request.\n   *\n   * @param eventUploadMaxBatchSize the event upload max batch size\n   */\n  setEventUploadMaxBatchSize(\n    eventUploadMaxBatchSize: number,\n  ): Promise<boolean> {\n    return AmplitudeReactNative.setEventUploadMaxBatchSize(\n      this.instanceName,\n      eventUploadMaxBatchSize,\n    );\n  }\n\n  /**\n   * Sets event upload period millis. The SDK will attempt to batch upload unsent events\n   * every eventUploadPeriodMillis milliseconds, or if the unsent event count exceeds the\n   * event upload threshold.\n   *\n   * @param eventUploadPeriodMillis the event upload period millis\n   */\n  setEventUploadPeriodMillis(\n    eventUploadPeriodMillis: number,\n  ): Promise<boolean> {\n    return AmplitudeReactNative.setEventUploadPeriodMillis(\n      this.instanceName,\n      eventUploadPeriodMillis,\n    );\n  }\n\n  /**\n   * Sets event upload threshold. The SDK will attempt to batch upload unsent events\n   * every eventUploadPeriodMillis milliseconds, or if the unsent event count exceeds the\n   * event upload threshold.\n   *\n   * @param eventUploadThreshold the event upload threshold\n   */\n  setEventUploadThreshold(eventUploadThreshold: number): Promise<boolean> {\n    return AmplitudeReactNative.setEventUploadThreshold(\n      this.instanceName,\n      eventUploadThreshold,\n    );\n  }\n\n  // Private bridging calls\n  private _setLibraryName(libraryName: string): Promise<boolean> {\n    return AmplitudeReactNative.setLibraryName(this.instanceName, libraryName);\n  }\n\n  private _setLibraryVersion(libraryVersion: string): Promise<boolean> {\n    return AmplitudeReactNative.setLibraryVersion(\n      this.instanceName,\n      libraryVersion,\n    );\n  }\n}\n"]}
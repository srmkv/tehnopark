import { Identify } from './identify';
export { Identify };
export declare class Amplitude {
    private static _instances;
    private static _defaultInstanceName;
    instanceName: string;
    private constructor();
    static getInstance(instanceName?: string): Amplitude;
    init(apiKey: string): Promise<boolean>;
    /**
     * Tracks an event. Events are saved locally.
     * Uploads are batched to occur every 30 events or every 30 seconds
     * (whichever comes first), as well as on app close.
     *
     * @param eventType The name of the event you wish to track.
     */
    logEvent(eventType: string, eventProperties?: Record<string, unknown>): Promise<boolean>;
    /**
     * Enable COPPA (Children's Online Privacy Protection Act) restrictions on
     * IDFA, IDFV, city, IP address and location tracking.
     *
     * This can be used by any customer that does not want to collect IDFA, IDFV,
     * city, IP address and location tracking.
     */
    enableCoppaControl(): Promise<boolean>;
    /**
     * Disable COPPA (Children's Online Privacy Protection Act) restrictions on
     * IDFA, IDFV, city, IP address and location tracking.
     */
    disableCoppaControl(): Promise<boolean>;
    /**
     * Regenerate the DeviceId
     */
    regenerateDeviceId(): Promise<boolean>;
    /**
     * Sets a custom device id. <b>Note: only do this if you know what you are doing!</b>
     *
     * @param deviceId The device id.
     */
    setDeviceId(deviceId: string): Promise<boolean>;
    /**
     * Fetches the deviceId, a unique identifier shared between multiple users using the same app on the same device.
     * @returns the deviceId.
     */
    getDeviceId(): Promise<string>;
    /**
     * Use the Advertising ID on Android if available from Google Play Services.
     * Must be called before init.
     */
    setAdvertisingIdForDeviceId(): Promise<boolean>;
    /**
     * Use the App Set ID (fall back to this if `useAdvertisingIdForDeviceId` is used) for device ID.
     * Must be called before init.
     */
    setAppSetIdForDeviceId(): Promise<boolean>;
    /**
     * Enables tracking opt out.
     *
     * If the user wants to opt out of all tracking, use this method to enable
     * opt out for them. Once opt out is enabled, no events will be saved locally
     * or sent to the server.
     *
     * Calling this method again with enabled set to false will turn tracking back on for the user.
     *
     * @param optOut
     */
    setOptOut(optOut: boolean): Promise<boolean>;
    /**
     * Whether to automatically log start and end session events corresponding to
     * the start and end of a user's session.
     *
     * @param trackSessionEvents
     */
    trackingSessionEvents(trackSessionEvents: boolean): Promise<boolean>;
    /**
     * If your app has its own login system that you want to track users with,
     * you can set the userId.
     *
     * @param userId
     */
    setUserId(userId: string | null): Promise<boolean>;
    /**
     * Customize the destination for server url.
     *
     * @param serverUrl
     */
    setServerUrl(serverUrl: string): Promise<boolean>;
    /**
     * Dynamically adjust server URL
     *
     * @param useDynamicConfig
     */
    setUseDynamicConfig(useDynamicConfig: boolean): Promise<boolean>;
    /**
     * Log revenue data.
     *
     * Note: price is a required field to log revenue events.
     * If quantity is not specified then defaults to 1.
     *
     * @param userProperties
     */
    logRevenue(userProperties: {
        price: number;
        productId?: string;
        quantity?: number;
        revenueType?: string;
        receipt?: string;
        receiptSignature?: string;
        eventProperties?: {
            [key: string]: any;
        };
    }): Promise<boolean>;
    /**
     * Send an identify call containing user property operations to Amplitude servers.
     *
     * @param identifyInstance
     */
    identify(identifyInstance: Identify): Promise<boolean>;
    /**
     * Adds a user to a group or groups. You need to specify a groupType and groupName(s).
     * @param groupType
     * @param groupName
     */
    setGroup(groupType: string, groupName: string | string[]): Promise<boolean>;
    /**
     * Set or update properties of particular groups
     *
     * @param groupType
     * @param groupName
     * @param identifyInstance
     */
    groupIdentify(groupType: string, groupName: string | string[], identifyInstance: Identify): Promise<boolean>;
    /**
     * Adds properties that are tracked on the user level.
     * Note: Property keys must be [String] objects and values must be serializable.
     *
     * @param userProperties
     */
    setUserProperties(userProperties: Record<string, unknown>): Promise<boolean>;
    /**
     * Clears all properties that are tracked on the user level.
     *
     * Note: This operation is irreversible!!
     */
    clearUserProperties(): Promise<boolean>;
    /**
     * Upload all unsent events.
     */
    uploadEvents(): Promise<boolean>;
    /**
     * Fetches the sessionId, a timestamp used for log session event.
     * @returns the sessionId.
     */
    getSessionId(): Promise<number>;
    /**
     * Sets the minimum cutoff time in millisseconds for sessions to be considered distinct.
     * The default time is 5 minutes.
     *
     * @param minTimeBetweenSessionsMillis
     */
    setMinTimeBetweenSessionsMillis(minTimeBetweenSessionsMillis: number): Promise<boolean>;
    /**
     * Set Amplitude Server Zone, switch to zone related configuration,
     * including dynamic configuration. If updateServerUrl is true, including server url as well.
     * Recommend to keep updateServerUrl to be true for alignment.
     *
     * @param serverZone amplitude serverZone, US or EU, default is US
     * @param updateServerUrl if update server url when update server zone, recommend setting true
     */
    setServerZone(serverZone: string, updateServerUrl?: boolean): Promise<boolean>;
    /**
     * Sets event upload max batch size. This controls the maximum number of events sent with
     * each upload request.
     *
     * @param eventUploadMaxBatchSize the event upload max batch size
     */
    setEventUploadMaxBatchSize(eventUploadMaxBatchSize: number): Promise<boolean>;
    /**
     * Sets event upload period millis. The SDK will attempt to batch upload unsent events
     * every eventUploadPeriodMillis milliseconds, or if the unsent event count exceeds the
     * event upload threshold.
     *
     * @param eventUploadPeriodMillis the event upload period millis
     */
    setEventUploadPeriodMillis(eventUploadPeriodMillis: number): Promise<boolean>;
    /**
     * Sets event upload threshold. The SDK will attempt to batch upload unsent events
     * every eventUploadPeriodMillis milliseconds, or if the unsent event count exceeds the
     * event upload threshold.
     *
     * @param eventUploadThreshold the event upload threshold
     */
    setEventUploadThreshold(eventUploadThreshold: number): Promise<boolean>;
    private _setLibraryName;
    private _setLibraryVersion;
}

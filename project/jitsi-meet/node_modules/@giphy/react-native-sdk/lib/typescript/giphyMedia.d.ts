import type { Merge } from 'type-fest';
import type { IGif, IImages, IUser } from '@giphy/js-types';
export type GiphyMediaID = {
    id: string;
};
export type GiphyMediaData = GiphyMediaID & IGif;
export type GiphyMedia = GiphyMediaID & {
    url: string;
    aspectRatio: number;
    isDynamic: boolean;
    isVideo: boolean;
    data: GiphyMediaData;
};
type GiphyVideo = Exclude<IGif['video'], undefined>;
type RawAsset = Partial<{
    height: any;
    size: string;
    url: string;
    width: any;
}>;
type RawAssets = Record<keyof IImages & keyof GiphyVideo['assets'], RawAsset>;
type RawTag = string | {
    text: string;
};
type RawUser = Merge<IUser, Partial<{
    is_public: any;
    is_verified: any;
    suppress_chrome: any;
}>>;
type RawVideo = Merge<GiphyVideo, {
    assets?: RawAssets;
}>;
export type RawGiphyMediaData = Merge<GiphyMediaData, {
    images?: RawAssets;
    is_anonymous?: any;
    is_community?: any;
    is_dynamic?: any;
    is_featured?: any;
    is_hidden?: any;
    is_indexable?: any;
    is_preserve_size?: any;
    is_realtime?: any;
    is_removed?: any;
    is_sticker?: any;
    tags?: RawTag[];
    user?: RawUser;
    video?: RawVideo;
}>;
export type RawGiphyMedia = Merge<GiphyMedia, {
    data: RawGiphyMediaData;
}>;
export declare function makeGiphyMedia(rawMedia: RawGiphyMedia): GiphyMedia;
export {};
//# sourceMappingURL=giphyMedia.d.ts.map
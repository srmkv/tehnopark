"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GiphyMediaView = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _viewManager = require("./utils/viewManager");

var _GiphyMediaView = require("./native/GiphyMediaView");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GiphyMediaView extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "view", null);

    _defineProperty(this, "pause", () => {
      (0, _viewManager.runViewManagerCommand)({
        command: _GiphyMediaView.NativeGiphyMediaViewCommands.Pause,
        moduleName: _GiphyMediaView.COMPONENT_NAME,
        nodeHandle: (0, _reactNative.findNodeHandle)(this.view)
      });
    });

    _defineProperty(this, "resume", () => {
      (0, _viewManager.runViewManagerCommand)({
        command: _GiphyMediaView.NativeGiphyMediaViewCommands.Resume,
        moduleName: _GiphyMediaView.COMPONENT_NAME,
        nodeHandle: (0, _reactNative.findNodeHandle)(this.view)
      });
    });

    _defineProperty(this, "viewRef", component => {
      this.view = component;
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_GiphyMediaView.NativeGiphyMediaView, _extends({}, this.props, {
      ref: this.viewRef
    }));
  }

}

exports.GiphyMediaView = GiphyMediaView;
//# sourceMappingURL=GiphyMediaView.js.map
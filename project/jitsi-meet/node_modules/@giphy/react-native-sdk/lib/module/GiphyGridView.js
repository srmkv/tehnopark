function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { makeGiphyMedia } from './giphyMedia';
import { NativeGiphyGridView } from './native/GiphyGridView';
export class GiphyGridView extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "mediaSelectHandler", e => {
      const {
        onMediaSelect
      } = this.props;

      if (!onMediaSelect) {
        return;
      }

      e.nativeEvent.media = makeGiphyMedia(e.nativeEvent.media);
      return onMediaSelect(e);
    });
  }

  render() {
    const {
      onMediaSelect,
      ...other
    } = this.props;
    return /*#__PURE__*/React.createElement(NativeGiphyGridView, _extends({
      onMediaSelect: onMediaSelect ? this.mediaSelectHandler : undefined
    }, other));
  }

}
//# sourceMappingURL=GiphyGridView.js.map
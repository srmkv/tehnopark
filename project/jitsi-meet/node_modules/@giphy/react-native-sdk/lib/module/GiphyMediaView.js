function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { findNodeHandle } from 'react-native';
import { runViewManagerCommand } from './utils/viewManager';
import { NativeGiphyMediaView, NativeGiphyMediaViewCommands, COMPONENT_NAME } from './native/GiphyMediaView';
export class GiphyMediaView extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "view", null);

    _defineProperty(this, "pause", () => {
      runViewManagerCommand({
        command: NativeGiphyMediaViewCommands.Pause,
        moduleName: COMPONENT_NAME,
        nodeHandle: findNodeHandle(this.view)
      });
    });

    _defineProperty(this, "resume", () => {
      runViewManagerCommand({
        command: NativeGiphyMediaViewCommands.Resume,
        moduleName: COMPONENT_NAME,
        nodeHandle: findNodeHandle(this.view)
      });
    });

    _defineProperty(this, "viewRef", component => {
      this.view = component;
    });
  }

  render() {
    return /*#__PURE__*/React.createElement(NativeGiphyMediaView, _extends({}, this.props, {
      ref: this.viewRef
    }));
  }

}
//# sourceMappingURL=GiphyMediaView.js.map
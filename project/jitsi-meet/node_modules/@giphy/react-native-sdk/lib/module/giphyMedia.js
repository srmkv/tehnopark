const BOOL_PROPS = ['is_anonymous', 'is_community', 'is_featured', 'is_hidden', 'is_indexable', 'is_preserve_size', 'is_realtime', 'is_removed', 'is_sticker', 'is_dynamic'];
const USER_BOOL_PROPS = ['suppress_chrome', 'is_public', 'is_verified'];

const propToBool = obj => prop => {
  obj[prop] = Boolean(obj[prop]);
};

function normalizeTag(tag) {
  return typeof tag === 'string' ? tag : tag.text;
}

function normalizeAssets(assets) {
  const newAssets = { ...assets
  };
  Object.entries(newAssets).forEach(_ref => {
    let [key, asset] = _ref;
    newAssets[key] = { ...asset,
      width: parseInt(asset === null || asset === void 0 ? void 0 : asset.width, 10) || 0,
      height: parseInt(asset === null || asset === void 0 ? void 0 : asset.height, 10) || 0
    };
  });
  return newAssets;
}

function normalizeUser(user) {
  if (!user) {
    return user;
  }

  const newUser = { ...user
  };
  USER_BOOL_PROPS.forEach(propToBool(newUser));
  return newUser;
}

function normalizeVideo(video) {
  if (!video) {
    return video;
  }

  return { ...video,
    assets: normalizeAssets(video.assets)
  };
}

function normalizeMediaData(data) {
  var _newData$images;

  const newData = { ...data,
    id: String(data === null || data === void 0 ? void 0 : data.id),
    images: normalizeAssets(data === null || data === void 0 ? void 0 : data.images),
    tags: ((data === null || data === void 0 ? void 0 : data.tags) || []).map(normalizeTag),
    user: normalizeUser(data === null || data === void 0 ? void 0 : data.user),
    video: normalizeVideo(data === null || data === void 0 ? void 0 : data.video)
  };
  BOOL_PROPS.forEach(propToBool(newData));
  (_newData$images = newData.images) === null || _newData$images === void 0 ? true : delete _newData$images.mediaId;
  return newData;
}

export function makeGiphyMedia(rawMedia) {
  return { ...rawMedia,
    data: normalizeMediaData(rawMedia.data)
  };
}
//# sourceMappingURL=giphyMedia.js.map
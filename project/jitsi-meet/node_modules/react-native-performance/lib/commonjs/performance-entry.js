"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PerformanceResourceTiming = exports.PerformanceMeasure = exports.PerformanceMetric = exports.PerformanceReactNativeMark = exports.PerformanceMark = exports.PerformanceEntry = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PerformanceEntry {
  constructor(name, entryType, startTime, duration) {
    _defineProperty(this, "name", void 0);

    _defineProperty(this, "entryType", void 0);

    _defineProperty(this, "startTime", void 0);

    _defineProperty(this, "duration", void 0);

    this.name = name;
    this.entryType = entryType;
    this.startTime = startTime;
    this.duration = duration;
  }

  toJSON() {
    return {
      name: this.name,
      entryType: this.entryType,
      startTime: this.startTime,
      duration: this.duration
    };
  }

}

exports.PerformanceEntry = PerformanceEntry;

class PerformanceMark extends PerformanceEntry {
  constructor(markName, markOptions = {}) {
    super(markName, 'mark', markOptions.startTime, 0);

    _defineProperty(this, "detail", void 0);

    this.detail = markOptions.detail;
  }

  toJSON() {
    return {
      name: this.name,
      entryType: this.entryType,
      startTime: this.startTime,
      duration: this.duration,
      detail: this.detail
    };
  }

}

exports.PerformanceMark = PerformanceMark;

class PerformanceReactNativeMark extends PerformanceEntry {
  constructor(name, startTime) {
    super(name, 'react-native-mark', startTime, 0);
  }

}

exports.PerformanceReactNativeMark = PerformanceReactNativeMark;

class PerformanceMetric extends PerformanceEntry {
  constructor(name, metricOptions) {
    super(name, 'metric', metricOptions.startTime, 0);

    _defineProperty(this, "value", void 0);

    _defineProperty(this, "detail", void 0);

    this.value = metricOptions.value;
    this.detail = metricOptions.detail;
  }

  toJSON() {
    return {
      name: this.name,
      entryType: this.entryType,
      startTime: this.startTime,
      duration: this.duration,
      detail: this.detail,
      value: this.value
    };
  }

}

exports.PerformanceMetric = PerformanceMetric;

class PerformanceMeasure extends PerformanceEntry {
  constructor(measureName, measureOptions = {}) {
    super(measureName, 'measure', measureOptions.startTime, measureOptions.duration);

    _defineProperty(this, "detail", void 0);

    this.detail = measureOptions.detail;
  }

  toJSON() {
    return {
      name: this.name,
      entryType: this.entryType,
      startTime: this.startTime,
      duration: this.duration,
      detail: this.detail
    };
  }

}

exports.PerformanceMeasure = PerformanceMeasure;

class PerformanceResourceTiming extends PerformanceEntry {
  constructor({
    name,
    startTime,
    duration,
    initiatorType,
    responseEnd,
    transferSize
  } = {}) {
    super(name, 'resource', startTime, duration);

    _defineProperty(this, "initiatorType", void 0);

    _defineProperty(this, "responseEnd", void 0);

    _defineProperty(this, "fetchStart", void 0);

    _defineProperty(this, "transferSize", void 0);

    _defineProperty(this, "connectEnd", void 0);

    _defineProperty(this, "connectStart", void 0);

    _defineProperty(this, "decodedBodySize", void 0);

    _defineProperty(this, "domainLookupEnd", void 0);

    _defineProperty(this, "domainLookupStart", void 0);

    _defineProperty(this, "encodedBodySize", void 0);

    _defineProperty(this, "redirectEnd", void 0);

    _defineProperty(this, "redirectStart", void 0);

    _defineProperty(this, "requestStart", void 0);

    _defineProperty(this, "responseStart", void 0);

    _defineProperty(this, "secureConnectionStart", void 0);

    _defineProperty(this, "serverTiming", void 0);

    _defineProperty(this, "workerStart", void 0);

    _defineProperty(this, "workerTiming", void 0);

    this.initiatorType = initiatorType;
    this.fetchStart = startTime;
    this.responseEnd = responseEnd;
    this.transferSize = transferSize;
    this.connectEnd = 0;
    this.connectStart = 0;
    this.decodedBodySize = 0;
    this.domainLookupEnd = 0;
    this.domainLookupStart = 0;
    this.encodedBodySize = 0;
    this.redirectEnd = 0;
    this.redirectStart = 0;
    this.requestStart = 0;
    this.responseStart = 0;
    this.secureConnectionStart = 0;
    this.serverTiming = [];
    this.transferSize = 0;
    this.workerStart = 0;
    this.workerTiming = [];
  }

  toJSON() {
    return {
      name: this.name,
      entryType: this.entryType,
      startTime: this.startTime,
      duration: this.duration,
      initiatorType: this.initiatorType,
      fetchStart: this.fetchStart,
      responseEnd: this.responseEnd,
      transferSize: this.transferSize,
      connectEnd: this.connectEnd,
      connectStart: this.connectStart,
      decodedBodySize: this.decodedBodySize,
      domainLookupEnd: this.domainLookupEnd,
      domainLookupStart: this.domainLookupStart,
      encodedBodySize: this.encodedBodySize,
      redirectEnd: this.redirectEnd,
      redirectStart: this.redirectStart,
      requestStart: this.requestStart,
      responseStart: this.responseStart,
      secureConnectionStart: this.secureConnectionStart,
      serverTiming: this.serverTiming,
      workerStart: this.workerStart,
      workerTiming: this.workerTiming
    };
  }

}

exports.PerformanceResourceTiming = PerformanceResourceTiming;
//# sourceMappingURL=performance-entry.js.map
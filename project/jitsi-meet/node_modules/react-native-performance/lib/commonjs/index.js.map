{"version":3,"sources":["index.ts"],"names":["RNPerformanceManager","NativeModules","PerformanceObserver","addEntry","performance","Platform","OS","emitter","NativeEventEmitter","addListener","data","PerformanceReactNativeMark","name","startTime","PerformanceMetric","value","setResourceLoggingEnabled","enabled","globalThis"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIA;;AAKA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,0BAAjC;AACA,MAAM;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA,QAAvB;AAAiCC,EAAAA;AAAjC,IAAiD,qCAAvD;;;AAEA,IAAIC,sBAASC,EAAT,KAAgB,SAAhB,IAA6BN,oBAAjC,EAAuD;AACrD,QAAMO,OAAO,GAAG,IAAIC,+BAAJ,CAAuBR,oBAAvB,CAAhB;AAEAO,EAAAA,OAAO,CAACE,WAAR,CAAoB,MAApB,EAA6BC,IAAD,IAAU;AACpCP,IAAAA,QAAQ,CAAC,IAAIQ,4CAAJ,CAA+BD,IAAI,CAACE,IAApC,EAA0CF,IAAI,CAACG,SAA/C,CAAD,CAAR;AACD,GAFD;AAIAN,EAAAA,OAAO,CAACE,WAAR,CAAoB,QAApB,EAA+BC,IAAD,IAAU;AACtCP,IAAAA,QAAQ,CACN,IAAIW,mCAAJ,CAAsBJ,IAAI,CAACE,IAA3B,EAAiC;AAC/BC,MAAAA,SAAS,EAAEH,IAAI,CAACG,SADe;AAE/BE,MAAAA,KAAK,EAAEL,IAAI,CAACK;AAFmB,KAAjC,CADM,CAAR;AAMD,GAPD;AAQD;;eAEcX,W;;;AAGR,MAAMY,yBAAyB,GAAG,CAACC,OAAO,GAAG,IAAX,KAAoB;AAC3D,MAAIA,OAAJ,EAAa;AACX;AACA,+CAAsBC,UAAtB,EAAkCd,WAAlC,EAA+CD,QAA/C;AACD,GAHD,MAGO;AACL,iDAAwBe,UAAxB;AACD;AACF,CAPM","sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { createPerformance } from './performance';\nimport {\n  PerformanceReactNativeMark,\n  PerformanceMetric,\n} from './performance-entry';\nimport {\n  installResourceLogger,\n  uninstallResourceLogger,\n} from './resource-logger';\n\nconst { RNPerformanceManager } = NativeModules;\nconst { PerformanceObserver, addEntry, performance } = createPerformance();\n\nif (Platform.OS === 'android' || RNPerformanceManager) {\n  const emitter = new NativeEventEmitter(RNPerformanceManager);\n\n  emitter.addListener('mark', (data) => {\n    addEntry(new PerformanceReactNativeMark(data.name, data.startTime));\n  });\n\n  emitter.addListener('metric', (data) => {\n    addEntry(\n      new PerformanceMetric(data.name, {\n        startTime: data.startTime,\n        value: data.value,\n      })\n    );\n  });\n}\n\nexport default performance;\nexport type Performance = typeof performance;\n\nexport const setResourceLoggingEnabled = (enabled = true) => {\n  if (enabled) {\n    //@ts-ignore\n    installResourceLogger(globalThis, performance, addEntry);\n  } else {\n    uninstallResourceLogger(globalThis);\n  }\n};\n\nexport { PerformanceObserver };\nexport type {\n  EntryType,\n  PerformanceMark,\n  PerformanceMeasure,\n  PerformanceMetric,\n  PerformanceEntry,\n  PerformanceReactNativeMark,\n  PerformanceResourceTiming,\n} from './performance-entry';\n"]}